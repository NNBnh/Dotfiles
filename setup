#!/bin/sh

#    ____    __
#   / __/__ / /___ _____
#  _\ \/ -_) __/ // / _ \
# /___/\__/\__/\_,_/ .__/
#                 /_/

# File:         setup
# Description:  setup script that SuperB
# Author:       NNB
#               └─ https://github.com/NNBnh
# URL:          https://github.com/NNBnh/dots/blob/master/setup


# Values
DOTFILES_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

. "$DOTFILES_PATH/home/.config/env"

STEPS="${*:-install before home root after}"


# Functions
install_packages() {
	printf '\n\033[1;7;34m%s\033[0m\n' 'Install packages'
	superbbootstrap_install_packages "$DOTFILES_PATH/packageslist"

	printf '\n\033[1;7;34m%s\033[0m\n' 'Install extra packages'
		# Download submodules
		cd "$DOTFILES_PATH" || exit 1
		git submodule update --init --recursive
		cd "$WD" || exit 1

		# Python packages
		pip install --upgrade 'asciinema' 'youtube-dl' 'auto-editor' 'git+https://github.com/will8211/unimatrix.git'

		# Basher packages
		git clone 'https://github.com/basherpm/basher.git' "$XDG_DATA_HOME/basher"
		mkdir -p "$HOME/.local/bin" \
		&& ln -sf "$XDG_DATA_HOME/basher/bin/basher" "$HOME/.local/bin/" \
		&& for basher_package in 'NNBnh/bsymlink' 'NNBnh/bui-terminal' 'NNBnh/bui-appearance' 'NNBnh/bfetch' 'NNBnh/terminal-explorer' 'NNBnh/clipb' 'NNBnh/coderun' 'NNBnh/mk' 'NNBnh/hr'; do
			basher install "$basher_package"
		done

		# Git alias
		curl -fsSL 'https://raw.githubusercontent.com/GitAlias/gitalias/master/gitalias.txt' --create-dirs --output "$XDG_DATA_HOME/git/gitalias.txt"

		# MPV
		mkdir -p "$XDG_CONFIG_HOME/mpv/scripts" \
		&& for mpv_script in 'detect-image.lua' 'freeze-window.lua' 'image-positioning.lua' 'ruler.lua'; do
			curl -fsSL "https://raw.githubusercontent.com/occivink/mpv-image-viewer/master/scripts/$mpv_script" > "$XDG_CONFIG_HOME/mpv/scripts/$mpv_script"
		done

		# Resource
			# Mono fonts
			aria2c --dir "$TMPDIR" $(curl --silent --location 'https://api.github.com/repos/NNBnh/bmono/releases/latest' | grep -e '/bmono-ttf.zip' | cut -f '4' -d '"') \
			&& 7z x -o"$TMPDIR/" "$TMPDIR/bmono-ttf.zip" \
			&& mkdir -p "$XDG_DATA_HOME/fonts" \
			&& mv "$TMPDIR/ttf/"* "$XDG_DATA_HOME/fonts/"

			# Mouse cursor
			aria2c --dir "$TMPDIR" 'https://github.com/ful1e5/Bibata_Cursor/releases/download/v1.0.3/Bibata-Original-Ice.tar.gz' \
			&& 7z x -o"$TMPDIR/" "$TMPDIR/Bibata-Original-Ice.tar.gz" \
			&& 7z x -o"$TMPDIR/" "$TMPDIR/Bibata-Original-Ice.tar" \
			&& mv "$TMPDIR/Bibata-Original-Ice" "$XDG_DATA_HOME/icons/"

			# Charater picker
			mkdir -p "$XDG_DATA_HOME/charaters"
			curl -fsSL 'https://www.unicode.org/Public/emoji/13.1/emoji-test.txt' \
			| sed -e 's/ E[0-9.]*/:/g' -ne 's/^.*fully-qualified *# //p' > "$XDG_DATA_HOME/charaters/emoji"
			curl -fsSL 'https://raw.githubusercontent.com/carloscuesta/gitmoji/master/src/data/gitmojis.json' \
			| jq --raw-output '.gitmojis[] | [.emoji, .description] | join(": ")' > "$XDG_DATA_HOME/charaters/gitmoji"
}

symlink_home() {
	printf '\n\033[1;7;36m%s\033[0m\n' "Symlink to home ($HOME)"

	bsymlink "$DOTFILES_PATH/home" "$HOME"
}

symlink_root() {
	printf '\n\033[1;7;36m%s\033[0m\n' 'Symlink to root (/)'

	$PERMISSION_COMMAND bsymlink "$DOTFILES_PATH/root" '/'
}

before_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Setup before symlink'

	# Create directories (to only symlink files inside, not the directory)
	mkdir -p "$XDG_CONFIG_HOME/fcitx" "$XDG_CONFIG_HOME/kak" "$XDG_CONFIG_HOME/retroarch" \
	         "$XDG_DATA_HOME/fonts" "$XDG_DATA_HOME/icons" "$XDG_DATA_HOME/charaters" \
	         "$XDG_CACHE_HOME" \
	         "$HOME/.local/bin"

	# Remove junks (Spring cleaning your $HOME)
	mkdir -p "$XDG_DESKTOP_DIR"
	mv -f "$HOME/Desktop" "$HOME/Documents" "$HOME/Downloads" "$HOME/Music" "$HOME/Pictures" "$HOME/Public" "$HOME/Templates" "$HOME/Videos" \
	      "$HOME/.inputrc" "$HOME/.xinitrc" "$HOME/.xsession" "$HOME/.xsession-errors" \
	      "$HOME/.Xclients" "$HOME/.profile" "$HOME/.dmrc" "$HOME/.ICEauthority" "$HOME/.icons" \
	      "$HOME/.bashrc" "$HOME/.bash_profile" "$HOME/.bash_history" "$HOME/.bash_logout"

	# Remove conflicting items in $XDG_CONFIG_HOME
	for config_directory_path in "$XDG_CONFIG_HOME/."* "$XDG_CONFIG_HOME/"*; do
		config_directory_name="${config_directory_path#$XDG_CONFIG_HOME/}"

		if [ "$config_directory_name" != '.' ] && [ "$config_directory_name" != '..' ] && [ -e "$HOME/dots/home/.config/$config_directory_name" ]; then
			mv -f "$config_directory_path"
		fi
	done

	# Stop LightDM from making $HOME/.Xauthority (Spring cleaning your $HOME)
	printf "$(< /etc/lightdm/lightdm.conf)\n\n[LightDM]\nuser-authority-in-system-dir=true" >> "$TMPDIR/lightdm.conf" \
	&& $PERMISSION_COMMAND mv "$TMPDIR/lightdm.conf" '/etc/lightdm/lightdm.conf'
}

after_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Setup after symlink step'

	# Change default shell
	chsh -s "$(command -v fish)"

	# Change XDG directories
	[ -x "$(command -v xdg-user-dirs-update)" ] && for xdg_directory in 'DESKTOP' 'DOCUMENTS' 'DOWNLOAD' 'MUSIC' 'PICTURES' 'PUBLICSHARE' 'TEMPLATES' 'VIDEOS'; do
		eval "xdg-user-dirs-update --set '$xdg_directory' \"\$XDG_${xdg_directory}_DIR\""
	done

	# Add Firefox CSS
	[ -x "$(command -v firefox)" ] && for profile in "$HOME/.mozilla/firefox/"*'.default-release'; do
		ln -sf "$DOTFILES_PATH/extra/firefox/chrome" "$profile/"
	done \
	&& printf '\033[1;93m%s\033[0m' 'Remember to enable the option toolkit.legacyUserProfileCustomizations.stylesheets in about:config'

	# Enable firewall
	[ -x "$(command -v ufw)" ] && $PERMISSION_COMMAND ufw enable
}


# SBB #########################################################################

# WARNING !!!
# Don't touch anything from this point to the end of file
# if you don't know what you are doing.


# Values
WD="$PWD"

TMPDIR="${TMPDIR:-/tmp}"
TEMPORARY="$TMPDIR/superb-bootstrap"

DOTFILES_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

     APT_MARK='APT';      APT_PM='apt'         ;      APT_COMMAND="$PERMISSION_COMMAND $APT_PM install --assume-yes"
  Mports_MARK='MPT';   Mports_PM='mports'      ;   Mports_COMMAND="$PERMISSION_COMMAND $Mports_PM install"
 OpenBSD_MARK='OBP';  OpenBSD_PM='pkg_add'     ;  OpenBSD_COMMAND="$PERMISSION_COMMAND $OpenBSD_PM -I"
  Pacman_MARK='PAC';   Pacman_PM='pacman'      ;   Pacman_COMMAND="$PERMISSION_COMMAND $Pacman_PM --sync --noconfirm --needed"
 Portage_MARK='PTG';  Portage_PM='emerge'      ;  Portage_COMMAND="$PERMISSION_COMMAND $Portage_PM"
   PKGIN_MARK='PIN';    PKGIN_PM='pkgin'       ;    PKGIN_COMMAND="$PERMISSION_COMMAND $PKGIN_PM install -y"
   PKGNG_MARK='PNG';    PKGNG_PM='pkg'         ;    PKGNG_COMMAND="$PERMISSION_COMMAND $PKGNG_PM install -y"
Slackpkg_MARK='SLK'; Slackpkg_PM='slackpkg'    ; Slackpkg_COMMAND="$PERMISSION_COMMAND $Slackpkg_PM install"
  Termux_MARK='TMP';   Termux_PM='pkg'         ;   Termux_COMMAND="$Termux_PM install --assume-yes"
    XBPS_MARK='XBP';     XBPS_PM='xbps-install';     XBPS_COMMAND="$PERMISSION_COMMAND $XBPS_PM --yes"
  Zypper_MARK='ZPR';   Zypper_PM='zypper'      ;   Zypper_COMMAND="$PERMISSION_COMMAND $Zypper_PM --non-interactive install"
     AUR_MARK='AUR';      AUR_PM='paru'        ;      AUR_COMMAND="$AUR_PM --sync --skipreview --useask --noconfirm"
 Flatpak_MARK='FLA';  Flatpak_PM='flatpak'     ;  Flatpak_COMMAND="$PERMISSION_COMMAND $Flatpak_PM install"
Homebrew_MARK='HBR'; Homebrew_PM='brew'        ; Homebrew_COMMAND="$Homebrew_PM install"
MacPorts_MARK='MCP'; MacPorts_PM='port'        ; MacPorts_COMMAND="$PERMISSION_COMMAND $MacPorts_PM install"
     MAS_MARK='MAS';      MAS_PM='mas'         ;      MAS_COMMAND="$MAS_PM install"
     SBO_MARK='SBO';      SBO_PM='sbopkg'      ;      SBO_COMMAND="$PERMISSION_COMMAND $SBO_PM -ifq"
    Snap_MARK='SNA';     Snap_PM='snap'        ;     Snap_COMMAND="$PERMISSION_COMMAND $Snap_PM install"

case $(uname -s | tr '[:upper:]' '[:lower:]') in
	'darwin'*)
		PACKAGEMANAGER_LIST='Homebrew MacPorts MAS'
	;;
	'freebsd'*)
		PACKAGEMANAGER_MAIN='PKGNG'
	;;
	'midnightbsd'*)
		PACKAGEMANAGER_MAIN='Mports'
	;;
	'netbsd'*)
		PACKAGEMANAGER_MAIN='PKGIN'
	;;
	'openbsd'*)
		PACKAGEMANAGER_MAIN='OpenBSD'
	;;
	*)
		for packagemanager_check in 'Termux' 'APT' 'Pacman' 'Portage' 'Slackpkg' 'XBPS' 'Zypper'; do
			[ -x $(eval "command -v \"\$${packagemanager_check}_PM\"") ] && {
				PACKAGEMANAGER_MAIN="$packagemanager_check"
				break
			}
		done

		[ "$PACKAGEMANAGER_MAIN" != 'Termux' ] && {
			[ "$PACKAGEMANAGER_MAIN"  = 'Pacman'   ] && PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST AUR"
			[ "$PACKAGEMANAGER_MAIN"  = 'Slackpkg' ] && PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST SBO"
			                                            PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST Flatpak"
			                                            PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST Homebrew"
		}

		if [ "$PACKAGEMANAGER_MAIN" = 'APT' ] || [ "$PACKAGEMANAGER_MAIN" = 'Pacman' ]; then
			PACKAGEMANAGER_LIST="$PACKAGEMANAGER_LIST Snap"
		fi
	;;
esac

PACKAGEMANAGER_LIST="$PACKAGEMANAGER_MAIN $PACKAGEMANAGER_LIST" # This is a list of package managers supported on bootstrapping OS

if [ -x "$(command -v sudo)" ]; then
	PERMISSION_COMMAND='sudo'
elif [ -x "$(command -v doas)" ]; then
	PERMISSION_COMMAND='doas'
elif [ "$PACKAGEMANAGER_MAIN" != 'Termux' ]; then
	printf '\n\033[1;7;31m%s\033[0m\n' "Permission command not found or unsupported"
	exit 1
fi


# Functions
superbbootstrap_install_packages() {
	if [ -f "$1" ]; then
		packages_list=$(sed -e 's/#.*$//g' "$1")
	elif [ -z "$PACKAGEMANAGER_MAIN" ]; then
		printf '\n\033[1;7;31m%s\033[0m\n' "Main packages manager not found or unsupported"
		exit 1
	else
		printf '\n\033[1;7;31m%s\033[0m\n' 'Packages list not found'
		exit 1
	fi

	for packagemanager in $PACKAGEMANAGER_LIST; do
		eval "mark=\"\$${packagemanager}_MARK\""
		eval "install_command=\"\$${packagemanager}_COMMAND\""

		# Find packages with mark
		packages_installing=$(printf '%s' "$packages_list" | sed -e "s/^.*$mark://g" -e 's/[[:space:]].*$//g' -e '/^$/d' | tr '\n' ' ')

		# If finded, setup package manager then install packages
		[ -n "$packages_installing" ] && {
			# Remove lines with current mark so packages don't get reinstall on another package managers later on
			packages_list=$(printf '%s' "$packages_list" | sed -e "s/^.*$mark.*\$//g")

			printf '\n\033[1;7;35m%s\033[0m\n' "Setting up $packagemanager"
			eval "superbbootstrap_$packagemanager"

			printf '\n\033[1;7;32m%s\033[0m\n' "Installing $packagemanager packages"
			eval "$install_command $packages_installing"
		}
	done
}

superbbootstrap_APT() {
	$PERMISSION_COMMAND apt update  --assume-yes
	$PERMISSION_COMMAND apt upgrade --assume-yes
}

superbbootstrap_Mports() {
	$PERMISSION_COMMAND mport index
	$PERMISSION_COMMAND mport upgrade
}

superbbootstrap_OpenBSD() {
	$PERMISSION_COMMAND syspatch
}

superbbootstrap_Pacman() {
	$PERMISSION_COMMAND pacman --sync --sysupgrade --refresh --noconfirm --needed
}

superbbootstrap_Portage() {
	$PERMISSION_COMMAND emerge --sync
	$PERMISSION_COMMAND emerge --update --newuse --deep --with-bdeps=y @world
}

superbbootstrap_PKGIN() {
	$PERMISSION_COMMAND pkgin update -y
	$PERMISSION_COMMAND pkgin upgrade -y
}

superbbootstrap_PKGNG() {
	$PERMISSION_COMMAND pkg update -y
	$PERMISSION_COMMAND pkg upgrade -y
}

superbbootstrap_Slackpkg() {
	$PERMISSION_COMMAND slackpkg update gpg
	$PERMISSION_COMMAND slackpkg update
}

superbbootstrap_Termux() {
	pkg update  --assume-yes
	pkg upgrade --assume-yes
}

superbbootstrap_XBPS() {
	$PERMISSION_COMMAND xbps-install --sync --yes --update # Update XBPS itself so it can update other packages
	$PERMISSION_COMMAND xbps-install --sync --yes --update # Update packages
	$PERMISSION_COMMAND xbps-install --sync --yes void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree void-repo-debug
}

superbbootstrap_Zypper() {
	$PERMISSION_COMMAND zypper --non-interactive update
}

superbbootstrap_AUR() {
	if [ ! -x "$(command -v 'paru')" ]; then
		$Pacman_COMMAND git base-devel
		git clone 'https://aur.archlinux.org/paru.git' "$TEMPORARY/paru"
		cd "$TEMPORARY/paru" || exit 1
		makepkg -si
		cd "$WD" || exit 1
	else
		printf '%s\n' "Paru has been installed"
	fi
}

superbbootstrap_Flatpak() {
	if [ ! -x "$(command -v 'flatpak')" ]; then
		case "$PACKAGEMANAGER_MAIN" in
			'APT')         $APT_COMMAND flatpak gnome-software-plugin-flatpak ;;
			'Portage') $Portage_COMMAND sys-apps/flatpak                      ;;
			'Pacman')   $Pacman_COMMAND flatpak                               ;;
			'XBPS')       $XBPS_COMMAND flatpak                               ;;
			'Zypper')   $Zypper_COMMAND flatpak                               ;;
			'Slackpkg')
				if [ ! -x "$(command -v "$SBO_PM")" ]; then
					superbbootstrap_SBO
				fi

				$SBO_COMMAND flatpak
			;;
		esac
	else
		printf '%s\n' "Flatpak has been installed"
	fi

	flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}

superbbootstrap_Homebrew() {
	if [ ! -x "$(command -v 'brew')" ] >/dev/null; then
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	else
		printf '%s\n' "Homebrew has been installed"
	fi
}

superbbootstrap_MacPorts() {
	[ ! -x "$(command -v 'xcode')" ] && {
		printf '\n\033[1;7;31m%s\033[0m\n' 'Please install XCode first: https://guide.macports.org/#installing.xcode'
		exit 1
	}

	xcode-select --install
	$PERMISSION_COMMAND xcodebuild -license
	cd "$TEMPORARY" || exit 1
	curl --remote-header-name --location --remote-name "https://github.com/macports/macports-base/releases/latest/download/MacPorts-$MACPORT_VERSION-$OS_VERSION_NUMBER-$OS_VERSION_NAME.pkg"
	$PERMISSION_COMMAND installer -pkg "$TEMPORARY/MacPorts-$MACPORT_VERSION-$OS_VERSION_NUMBER-$OS_VERSION_NAME.pkg" -target '/'
	cd "$WD" || exit 1
}

superbbootstrap_MAS() {
	if [ ! -x "$(command -v "$MAS_PM")" ]; then
		if   [ -x "$(command -v "$Homebrew_PM")" ]; then $Homebrew_COMMAND mas
		elif [ -x "$(command -v "$MacPorts_PM")" ]; then $MacPorts_COMMAND mas
		else
			[ ! -x "$(command -v "$Homebrew_PM")" ] && superbbootstrap_Homebrew

			$Homebrew_COMMAND mas
		fi
	else
		printf '%s\n' "MAS has been installed"
	fi

	mas account
	mas signin --dialog "$APPLE_ID"
}

superbbootstrap_SBO() {
	if [ ! -x "$(command -v 'sbopkg')" ]; then
		SBO_VERSION=$(curl -s "https://api.github.com/repos/sbopkg/sbopkg/releases/latest" | grep -e 'tag_name' | cut -f '4' -d '"')

		cd "$TEMPORARY" || exit 1
		curl --remote-header-name --location --remote-name "https://github.com/sbopkg/sbopkg/releases/download/$SBO_VERSION/sbopkg-$SBO_VERSION-noarch-1_wsr.tgz"
		upgradepkg --install-new "$TEMPORARY/sbopkg-$SBO_VERSION-noarch-1_wsr.tgz"
		cd "$WD" || exit 1
		$PERMISSION_COMMAND mkdir -p "/var/lib/sbopkg/SBo/$(cut -f '2' -d ' ' '/etc/slackware-version')" "/var/lib/sbopkg/queues" "/var/log/sbopkg" "/var/cache/sbopkg"
		$PERMISSION_COMMAND sbopkg -rq
		$PERMISSION_COMMAND sqg -a
	else
		printf '%s\n' "Sbopkg has been installed"
	fi
}

superbbootstrap_Snap() {
	if [ ! -x "$(command -v 'snap')" ]; then
		if [ $PACKAGEMANAGER_MAIN = 'Pacman' ]; then
			$PERMISSION_COMMAND pacman --sync --noconfirm --needed git
			git clone 'https://aur.archlinux.org/snapd.git' "$TEMPORARY/snap"
			cd "$TEMPORARY/snap" || exit 1
			makepkg -si
			cd "$WD" || exit 1
			$PERMISSION_COMMAND systemctl enable --now snapd.socket
			$PERMISSION_COMMAND ln -s '/var/lib/snapd/snap' '/snap'
		elif [ $PACKAGEMANAGER_MAIN = 'APT' ]; then
			$APT_COMMAND snapd
		fi
	else
		printf '%s\n' "Snapd has been installed"
	fi

	snap install core
}


# Start
for step_check in $STEPS; do
	case "$step_check" in
		'i'|'install') steps_list="${steps_list:+$steps_list; }install_packages" ;;
		'b'|'before')  steps_list="${steps_list:+$steps_list; }before_symlink"   ;;
		'h'|'home')    steps_list="${steps_list:+$steps_list; }symlink_home"     ;;
		'r'|'root')    steps_list="${steps_list:+$steps_list; }symlink_root"     ;;
		'a'|'after')   steps_list="${steps_list:+$steps_list; }after_symlink"    ;;
		*)
			printf '\n\033[1;7;31m%s\033[0m\n' "Step '$step_check' not found"
			exit 1
		;;
	esac
done

eval "$steps_list"


exit 0
