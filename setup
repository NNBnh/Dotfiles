#!/bin/sh

#    ____    __
#   / __/__ / /___ _____
#  _\ \/ -_) __/ // / _ \
# /___/\__/\__/\_,_/ .__/
#                 /_/

# File:         setup
# Description:  setup script that SuperB
# Author:       NNB
#               └─ https://github.com/NNBnh
# URL:          https://github.com/NNBnh/dots/blob/master/setup


# Imports
DOTFILES_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

cd "$DOTFILES_PATH" || exit 1
git submodule update --init --recursive --remote --merge
cd "$WD" || exit 1

. "$DOTFILES_PATH/extra/sbb/sbb"


# Values
eval "$("$DOTFILES_PATH/home/.config/env/rc")"

STEPS="${*:-install before home root after}"


# Functions
install_packages() {
	printf '\n\033[1;7;34m%s\033[0m\n' 'Install packages' >&2

	PIP_PM='sbb_pipx'
	PIP_COMMAND="$PIP_PM"
	sbb_setup_PIP() {
		sbb_install_curl
		sbb_install_python

		cd "$TEMPORARY" || exit 1
		curl --remote-header-name --location --remote-name "https://bootstrap.pypa.io/get-pip.py"
		python get-pip.py

		pip install --upgrade pip
		pip install --user pipx
		pipx ensurepath

		sbb_make_install_command 'pipx' "pipx install"
	}

	sbb_install_packages "$DOTFILES_PATH/packageslist"

	printf '\n\033[1;7;34m%s\033[0m\n' 'Install extra resource' >&2
		# Mono fonts
		curl --silent --location $(curl --silent --location 'https://api.github.com/repos/NNBnh/bmono/releases/latest' | jq --raw-output '.assets | .[] | select(.name=="bmono-ttf.zip") | .browser_download_url') --output "$TMPDIR/bmono-ttf.zip" \
		&& 7z x "$TMPDIR/bmono-ttf.zip" -o"$TMPDIR/" \
		&& mkdir -p "$XDG_DATA_HOME/fonts" \
		&& mv -f "$TMPDIR/ttf/"* "$XDG_DATA_HOME/fonts/"

		# Mouse cursor
		curl --silent --location 'https://github.com/ful1e5/Bibata_Cursor/releases/download/v1.0.3/Bibata-Original-Ice.tar.gz' --output "$TMPDIR/Bibata-Original-Ice.tar.gz" \
		&& 7z x "$TMPDIR/Bibata-Original-Ice.tar.gz" -o"$TMPDIR/" \
		&& 7z x "$TMPDIR/Bibata-Original-Ice.tar"    -o"$TMPDIR/" \
		&& mv -f "$TMPDIR/Bibata-Original-Ice" "$XDG_DATA_HOME/icons/"

		# Charater picker
		mkdir -p "$XDG_DATA_HOME/charaters"
		curl -fsSL 'https://www.unicode.org/Public/emoji/13.1/emoji-test.txt' \
		| sed -e 's/ E[0-9.]*/:/g' -ne 's/^.*fully-qualified *# //p' > "$XDG_DATA_HOME/charaters/emoji"
		curl -fsSL 'https://raw.githubusercontent.com/carloscuesta/gitmoji/master/src/data/gitmojis.json' \
		| jq --raw-output '.gitmojis[] | [.emoji, .description] | join(": ")' > "$XDG_DATA_HOME/charaters/gitmoji"
}

symlink_home() {
	printf '\n\033[1;7;36m%s\033[0m\n' "Symlink to home ($HOME)" >&2

	bsymlink "$DOTFILES_PATH/home" "$HOME"
}

symlink_root() {
	printf '\n\033[1;7;36m%s\033[0m\n' 'Symlink to root (/)' >&2

	$PERMISSION_COMMAND bsymlink "$DOTFILES_PATH/root" '/'
}

before_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Setup before symlink' >&2

	# Create directories (to only symlink files inside, not the directory)
	mkdir -p "$XDG_CONFIG_HOME/fcitx" "$XDG_CONFIG_HOME/kak" "$XDG_CONFIG_HOME/retroarch" \
	         "$XDG_DATA_HOME/fonts" "$XDG_DATA_HOME/icons" "$XDG_DATA_HOME/charaters" \
	         "$XDG_CACHE_HOME" "$XDG_DESKTOP_DIR" \
	         "$HOME/.local/bin"

	# Remove junks (Spring cleaning your $HOME)
	mv -f "$HOME/Desktop" "$HOME/Documents" "$HOME/Downloads" "$HOME/Music" "$HOME/Pictures" "$HOME/Public" "$HOME/Templates" "$HOME/Videos" \
	      "$HOME/.inputrc" "$HOME/.xinitrc" "$HOME/.xsession" "$HOME/.xsession-errors" \
	      "$HOME/.Xclients" "$HOME/.profile" "$HOME/.dmrc" "$HOME/.ICEauthority" "$HOME/.icons" \
	      "$HOME/.bashrc" "$HOME/.bash_profile" "$HOME/.bash_history" "$HOME/.bash_logout" \
	      "$XDG_DESKTOP_DIR"

	# Remove conflicting items in $XDG_CONFIG_HOME
	for config_directory_path in "$XDG_CONFIG_HOME/."* "$XDG_CONFIG_HOME/"*; do
		config_directory_name="${config_directory_path#$XDG_CONFIG_HOME/}"

		if [ "$config_directory_name" != '.' ] && [ "$config_directory_name" != '..' ] && [ -e "$HOME/dots/home/.config/$config_directory_name" ]; then
			mv -f "$config_directory_path"
		fi
	done

	# Stop LightDM from making $HOME/.Xauthority (Spring cleaning your $HOME)
	printf "$(< /etc/lightdm/lightdm.conf)\n\n[LightDM]\nuser-authority-in-system-dir=true" >> "$TMPDIR/lightdm.conf" \
	&& $PERMISSION_COMMAND mv "$TMPDIR/lightdm.conf" '/etc/lightdm/lightdm.conf'
}

after_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Setup after symlink' >&2

	# Change default shell
	chsh -s "$(command -v fish)"

	# Change XDG directories
	[ -x "$(command -v xdg-user-dirs-update)" ] \
	&& for xdg_directory in 'DESKTOP' 'DOCUMENTS' 'DOWNLOAD' 'MUSIC' 'PICTURES' 'PUBLICSHARE' 'TEMPLATES' 'VIDEOS'; do
		eval "xdg-user-dirs-update --set '$xdg_directory' \"\$XDG_${xdg_directory}_DIR\""
	done

	# Add Firefox CSS
	[ -x "$(command -v firefox)" ] \
	&& for profile in "$HOME/.mozilla/firefox/"*'.default-'*; do
		ln -sf "$DOTFILES_PATH/extra/firefox/chrome" "$profile/"
	done \
	&& printf '\033[1;93m%s\033[0m' 'Remember to enable the option toolkit.legacyUserProfileCustomizations.stylesheets in about:config'

	# Enable firewall
	[ -x "$(command -v ufw)" ] && $PERMISSION_COMMAND ufw enable
}


# Start
for step_check in $STEPS; do
	case "$step_check" in
		'i'|'install') steps_list="${steps_list:+$steps_list; }install_packages" ;;
		'b'|'before')  steps_list="${steps_list:+$steps_list; }before_symlink"   ;;
		'h'|'home')    steps_list="${steps_list:+$steps_list; }symlink_home"     ;;
		'r'|'root')    steps_list="${steps_list:+$steps_list; }symlink_root"     ;;
		'a'|'after')   steps_list="${steps_list:+$steps_list; }after_symlink"    ;;
		*)
			printf '\n\033[1;7;31m%s\033[0m\n' "Step '$step_check' not found" >&2
			exit 1
		;;
	esac
done

eval "$steps_list"


exit 0
